example_code = '''
<example code>
@GetMapping("/appointment/consultation/{recordId}")
public ResponseEntity<?> checkConsultation(@PathVariable("recordId") String recordId){
    CheckConsultationDTO checkConsultationDTO = consultationService.checkConsultation(recordId);
    return ResponseEntity.status(HttpStatus.OK).body(checkConsultationDTO);
</example code>

<exapmle output>
{
    "name": "checkConsultation",
    "url": "/appointment/consultation/{recordId}",
    "input body": "null",
    "method": "get"
}
</example ouput>
'''
template = '''
{example_code}
1.You are a software engineer.
2.This is a Java project based on Spring Boot.
3.Help me find all the controller API entry points.
4.Base on the example code to print the out example output.
5.Only print out the name, url, input body and method.  
6.Help me organize and print out all the method information for target_code.
7.Don't tell me anything other than the entry points.

<target_code>
{project_code}
</target_code>
'''

example_code = '''
<example input object>
public class UpdateConsultationDTO {

	private String recordId;
	private String medicines;
	private String symptom;

	@Override
	public String toString(){
		return "recordId : " + recordId + "\n"
				+ "medicines : " + medicines + "\n"
				+ "symptom : " + symptom;
	}
}
</example input object>

<example entry point>
{
    "Name": "updateConsultation",
    "URL": "/appointment/updateConsultation",
    "Input body": "UpdateConsultationDTO",
    "Method": "Post"
}
</example entroy point>

<injected entry point>
{
    "Name": "updateConsultation",
    "URL": "/appointment/updateConsultation",
    "Input body": {
        "recordId": "",
        "medicines": "",
        "symptom": ""
    },
    "Method": "Post"
}

</injected entry point>
'''

template = '''
{example_code}
1.You are a software engineer.
2.This is a Java project based on Spring Boot.
3.For the example entropy point, only the input body's name is listed. Help me reinject the detailed contents of the object from the project into the entry point.
4.Don't tell me anything other than the Target Entry Points.
6.Help me organize and print out all the method information for target_entry_point.
<target_entry_point>
{columnar_code}
</target_entry_point>
'''

question = '''
<example code>
public class updateDBDTO{
    String id;
    String database;
    String consultation;
}
</example code>

<example microservice relationship>
{
    "testCaseName": "TestGetAppointmentByOwnerName",
    "relationship": [
        {
            "controllerName": "AppointmentControllerTest",
            "methodName": "getAppointmentByOwnerName",
            "url": "/appointment/getAppointments",
            "inputBody": "OwnerNameDTO",
            "methodType": "post",
            "dependency": [
                {
                    "controllerName": "AppointmentController",
                    "methodName": "getRecordById",
                    "url": "/appointment/medicalRecord/{id}",
                    "inputBody": null,
                    "methodType": "get",
                    "dependency": null
                },
                {
                    "controllerName": "UpdateRepository",
                    "methodName": "updateConsultationDB",
                    "url": "/appointment/updateConsultationDB",
                    "inputBody": updateDBDTO,
                    "methodType": "post",
                    "dependency": null                    
                }
            ]
        }
    ]
}
</example microservice relationship>
<microservice relationship>
{
    "testCaseName": "TestCheckConsultation",
    "relationship": {
        "controllerName": "ConsultationController",
        "methodName": "testCheckConsultation",
        "url": "/appointment/consultation/12345",
        "inputBody": null,
        "methodType": "get",
        "dependency": [
            {
                "controllerName": "AppointmentController",
                "methodName": "getRecordById",
                "url": "/appointment/medicalRecord/{id}",
                "inputBody": null,
                "methodType": "get",
                "dependency": null
            },
            {
                "controllerName": "MedicineController",
                "methodName": "getMedicine",
                "url": "/appointment/medicine/{recordId}",
                "inputBody": null,
                "methodType": "get",
                "dependency": null
            },
            {
                "controllerName": "AppointmentController",
                "methodName": "setState",
                "url": "/appointment/setState",
                "inputBody": "SetStateDTO",
                "methodType": "post",
                "dependency": null
            },
        ]
    }
}
</microservice relationship>
You are a software engineer.
When converting it, it's important to consider the dependencies between services. 
Additionally, a contract test needs to be created for each microservice.
The "example microservice relationship" is a dependency relationship within a microservice architecture. 
It signifies an integration test scenario where the updateConsultation method of the ConsultationController is being tested, 
relying on functionalities from the AppointmentController (getRecordById method) and the PaymentController (updateConsultationDB method). 
This involves sending a GET request to getRecordById, including an ID parameter in the path. 
Additionally, a POST request is made to updateConsultationDB, incorporating an updateDBDTO object in the request.
Help me convert microservice relationship into a Spring Cloud Contract based on the microservices relationship.
If there are three microservices in the relationship, three contracts need to be generated.
Please refer to the project provided in the embedding. When generating contracts, 
special attention should be paid to ensuring that the generated contracts comply with the logic of long-term transactions in microservices. Additionally, 
it must be ensured that the contract generated by the previous microservice can be verified by the subsequent ones.
Print out the Groovy contract file only, without any additional related settings.
It should include contracts related to testCheckConsultation, getRecordById, getMedicine, and setState.
Generate contract files with filenames based on the testing objectives of the contracts.
'''

example_relationship = '''
<example microservice relationship>
{
    "testCaseName": "TestUpdateConsultation",
    "relationship": [
        {
            "endpointName": "ConsultationController",
            "methodName": "updateConsultation",
            "url": "/appointment/createConsultation",
            "inputBody": "String",
            "methodType": "post",
            "dependency": [
                {
                    "endpointName": "AppointmentAmqpListener",
                    "methodName": "getRecordById",
                    "queue": "getRecordById",
                    "inputBody": String,
                    "dependency": [
                    	{
                    	    "endpointName": "ConsultationListener",
		                    "methodName": "listenQueue2UpdateConsultation",
		                    "queue": "listenQueue2UpdateConsultation",
		                    "inputBody": ï¼­edicalRecord,
		                    "dependency": null
                    	}
                    ]
                }
            ]
        },
        {
        	"endpointName": "ConsultationController",
            "methodName": "checkUpdateConsultationResult",
            "url": "/appointment/checkUpdateConsultationResult/{id}",
            "inputBody": null,
            "methodType": "get",
            "dependency": null
        }
    ]
}
</example microservice relationship>
'''
before_migration_microservice_relationship = '''
<before migration microservice relationship>
{
	"testCaseName": "CreateAppointmentTest",
	"relationship": [
		{
			"endpointName": "AppointmentController",
			"methodName": "createAppointment",
			"url": "/appointment/createAppointments",
			"inputBody": "CreateAppointmentDTO",
			"methodType": "post",
			"dependency": [
				{
					"endpointName": "ConsultationAmqpReceiver",
                    "methodName": "createConsultation",
                    "url": "/appointment/createConsultation",
                    "inputBody": MedicalRecord,
					"methodType": "post",
                    "dependency": null
				},				
				{
					"endpointName": "MedicineAmqpReceiver",
                    "methodName": "createMedicine",
                    "url": "/appointment/createMedicine",
                    "inputBody": MedicalRecord,
					"methodType": "post",
                    "dependency": null
				},
								{
					"endpointName": "PaymentAmqpReceiver",
                    "methodName": "createPayment",
                    "url": "/appointment/createPayment",
                    "inputBody": MedicalRecord,
					"methodType": "post",
                    "dependency": null
				}
			]
		}
	]
}
</before migration microservice relationship>
'''

after_migration_microservice_relationship = '''
<after migration microservice relationship>
{
	"testCaseName": "CreateAppointmentTest",
	"relationship": [
		{
			"endpointName": "AppointmentController",
			"methodName": "createAppointment",
			"conmmunicationStyle": "RESTful",
			"url": "/appointment/createAppointments",
			"inputBody": "CreateAppointmentDTO",
			"methodType": "post",
			"dependency": [
				{
					"endpointName": "ConsultationAmqpReceiver",
                    "methodName": "createConsultation",
                    "queue": "createConsultation",
                    "inputBody": MedicalRecord,
                    "dependency": null
				},				
				{
					"endpointName": "MedicineAmqpReceiver",
                    "methodName": "createMedicine",
                    "queue": "createMedicine",
                    "inputBody": MedicalRecord,
                    "dependency": null
				},
								{
					"endpointName": "PaymentAmqpReceiver",
                    "methodName": "createPayment",
                    "queue": "createPayment",
                    "inputBody": MedicalRecord,
                    "dependency": null
				}
			]
		}
	]
}
</after migration microservice relationship>
'''
restful_contracts = '''
<restful_contracts>
package contracts

import org.springframework.cloud.contract.spec.Contract

Contract.make {
    request {
        method POST()
        url '/appointment/createAppointments'
        body(
                ownerId:"1",
                petId:"2",
                vetId:"1",
                appointmentDate: "2024-03-05T21:00:00"
        )
        headers {
            contentType(applicationJson())
        }
    }
    response {
        status 201
    }
}

package contracts

import org.springframework.cloud.contract.spec.Contract

Contract.make {
    request {
        method POST()
        url "/appointment/createConsultation"
        body("12345 ")
        headers {
//            contentType(applicationJson())
        }
    }

    response {
        status 201
    }
}

package contracts

import org.springframework.cloud.contract.spec.Contract

Contract.make {
    request {
        method POST()
        url "/appointment/createMedicine"
        body("12345 ")
        headers {
//            contentType(applicationJson())
        }
    }

    response {
        status 201
    }
}

package contracts

import org.springframework.cloud.contract.spec.Contract

Contract.make {
    request {
        method POST()
        url "/appointment/createPayment"
        body("12345 ")
        headers {
//            contentType(applicationJson())
        }
    }

    response {
        status 201
    }
}
</restful_contracts>
'''

message_contract_template = '''
<message_contract_template>
package contracts

import org.springframework.cloud.contract.spec.Contract


Contract.make {
    description "should send a message when event occurs"
    label "getPaymentInfo"

    input {
        triggeredBy("getPaymentInfoTrigger()")
    }

    outputMessage {
        sentTo "getRecord2Payment"
        body("ee9a168b-b9ae-42ed-8b4c-0f06148574d0")
    }
}
</message_contract_template>
'''

prompt = '''
You are a software engineer.AppointmentControllerTest is an integration test case for a Spring Boot controller. 
When converting it, it's important to consider the dependencies between services. 
Additionally, a contract test needs to be created for each microservice.
The "example microservice relationship" is a dependency relationship within a microservice architecture. 
It signifies an integration test scenario where the updateConsultation method of the ConsultationController is being tested, 
relying on functionalities from the AppointmentAmqpListener (getRecordById method). 
This involves sending a GET request to getRecordById, including an ID parameter in the path. 
In an integration test scenario, the ConsultationController will first communicate using a message queue, 
and then the AppointmentAmqpListener will return a message to the ConsultationListener.
In the example microservice relationship, communication may involve either RESTful or message-based methods. 
If there is a URL in the option, it is RESTful; if there is a queue in the option, it is message-based.
"<before migration microservice relationship>" represents the RESTful microservices before migration, 
while "<after migration microservice relationship>" represents the event-driven microservices after migration. 
Please help me convert the RESTful contract test cases ("<restful_contracts>") into event-driven test cases according 
to the logic of "<before migration microservice relationship>" and "<after migration microservice relationship>". 
The business logic before and after conversion must adhere to the embedding logic.
'''